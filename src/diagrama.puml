@startuml


    class ModeloJuego {
        - ArrayList<Observer> observers
        - ArrayList<ModeloJugador> jugadores
        - ModeloMazo mazo
        - int turnoActual
        - ModeloMesa mesa
        - final int puntosParaGanar
        + ModeloJuego(String jugador1, String jugador2, String jugador3, String jugador4)
        + ModeloJuego()
        + void agregarObserver(Observer o)
        + void eliminarObserver(Observer o)
        + void notificarObservers(String tipoActualizacion, Object objetoAActualizar)
        + void repartirCartas()
        + ModeloMesa getMesa()
        + ArrayList<ArrayList<ModeloCarta>> buscarCombinacion15(ModeloCarta cartaJugador)
        + ModeloJugador getJugadorActual()
        + void agregarCartaAMesa(ModeloCarta carta)
        + void juntarCartas(ModeloCarta carta, ArrayList<ModeloCarta> combinacion)
        + void pasarTurno()
        + boolean hayGanador()
        + void contarPuntos()
        + void renovarMazo()
    }

    class ModeloCarta {
        + enum Palo { ORO, COPA, BASTO, ESPADA }
        - int numero
        - Palo palo
        + ModeloCarta(int numero, Palo palo)
        + Palo getPalo()
        + int getNumero()
        + String toString()
    }

    class ModeloJugador {
        - String nombre
        - ArrayList<ModeloCarta> cartasEnMano
        - ArrayList<ModeloCarta> cartasJuntadas
        - int puntos
        + ModeloJugador(String nombre)
        + void agregarCarta(ModeloCarta carta)
        + ModeloCarta usarCarta(ModeloCarta carta)
        + int getPuntos()
        + ArrayList<ModeloCarta> getCartasEnMano()
        + boolean tieneElSieteDeOro()
    }

    class ModeloMazo {
        - Stack<ModeloCarta> cartas
        + ModeloMazo()
        + void mezclarCartas()
        + ModeloCarta repartirCarta()
        + int getSize()
    }

    class ModeloMesa {
        - ArrayList<ModeloCarta> cartasEnMesa
        + ModeloMesa()
        + void agregarCarta(ModeloCarta carta)
        + void retirarCarta(ModeloCarta carta)
        + ArrayList<ModeloCarta> getCartasEnMesa()
    }



    class ControladorJuego {
        - ModeloJuego modelo
        - Vista vista
        + ControladorJuego(Vista vista, ModeloJuego modelo)
        + void jugarPartida()
    }


    class Vista {
        + void actualizar(String tipo, Object o)
        + int solicitarCarta()
        + void mostrarMesa(ModeloMesa mesa)
        + void mostrarCartasJugador(ModeloJugador jugador)
    }


    interface Observable {
        + void agregarObserver(Observer o)
        + void eliminarObserver(Observer o)
        + void notificarObservers(String tipoActualizacion, Object objetoAActualizar)
    }

    interface Observer {
        + void actualizar(String tipo, Object o)
    }

ModeloJuego --> ModeloJugador
ModeloJuego --> ModeloMesa
ModeloJuego --> ModeloMazo
ModeloJugador --> ModeloCarta
ModeloMazo --> ModeloCarta
ModeloMesa --> ModeloCarta
ControladorJuego --> ModeloJuego
ControladorJuego --> Vista
Vista ..> ModeloMesa
Vista ..> ModeloJugador
Observable <|-- ModeloJuego : "impements"
Observer <|-- Vista : "implements"

@enduml

